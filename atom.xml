<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>羊末离殇的独立博客</title>
  
  <subtitle>与代码的持久博弈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.ymlsfly.xin/"/>
  <updated>2018-01-18T01:37:50.952Z</updated>
  <id>http://github.ymlsfly.xin/</id>
  
  <author>
    <name>羊末离殇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>testlink的学习</title>
    <link href="http://github.ymlsfly.xin/2018/01/18/testlink%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://github.ymlsfly.xin/2018/01/18/testlink的学习/</id>
    <published>2018-01-18T01:02:06.000Z</published>
    <updated>2018-01-18T01:37:50.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>TestLink</p></blockquote><p>是基于web的测试用例管理系统，主要功能是测试用例的创建、管理和执行，并且还提供了一些简单的统计功能。</p><p>testlink这类工具一般都用于在服务器端，所以博主偏重讲下linux下的testlink的安装配置。</p><h2 id="Windows-xampp安装配置testlink"><a href="#Windows-xampp安装配置testlink" class="headerlink" title="Windows+xampp安装配置testlink"></a>Windows+xampp安装配置testlink</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>从网上下载testlink的压缩包，将安装包解压，放到xampp的htdocs目录下，改名为testlink。</li><li><p>启动Apache，浏览器打开testlink，点击New installation，选择协议，点击下一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip/testlink</span><br></pre></td></tr></table></figure></li><li><p>continue然后配置mysql，安装成功，登录testlink，默认用户名/密码为admin/admin</p></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>中间配置可能会有警告，对其安装并没有影响，如果有需要可以修改篇配置来消掉警告。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Maximun Session Idle Time before Timeout ：shot.consider to extend</span><br><span class="line">//配置文件中找到对应值调大</span><br><span class="line">Checking max.execution time(Parameter max_execution_time) 30 seconds –we suggest 120 seconds in order to manage hundred of test cases</span><br><span class="line">//配置文件中找到对应值调大</span><br><span class="line">Checking maximal allowed memory (Parameter memory_limit) </span><br><span class="line">//配置文件中找到对应值调大</span><br></pre></td></tr></table></figure></p><h2 id="linux-Apache安装配置testlink"><a href="#linux-Apache安装配置testlink" class="headerlink" title="linux+Apache安装配置testlink"></a>linux+Apache安装配置testlink</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ol><li><p>在服务器上直接下载testlink压缩包，或在Windows上通过远程工具将下载好的testlink压缩包传到服务器。也可以在服务器上直接通过wget命令下载。</p></li><li><p>解压，然后将其移至Apache工作目录/var/www/html/文件夹下，重命名为testlink：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf testlink-1.9.14.tar.gz</span><br><span class="line">mv testlink-1.9.14 /var/www/html/testlink</span><br></pre></td></tr></table></figure></li><li><p>在浏览器打开<a href="http://ip/testlink" target="_blank" rel="noopener">http://ip/testlink</a><br><img src="https://raw.githubusercontent.com/1139195320/imgs/8b908968111c3b8292200570a420089d0185eef3/testlink/1.png" alt=""><br><img src="https://raw.githubusercontent.com/1139195320/imgs/8b908968111c3b8292200570a420089d0185eef3/testlink/2.png" alt=""></p></li><li>警告和错误信息处理：（操作后都必须要重启Apache）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">警告信息：</span><br><span class="line">Maximum Session Idle Time before Timeout</span><br><span class="line">24 minutes and 0 seconds - (Short. Consider to exten</span><br><span class="line">d.)</span><br><span class="line">解决：修改php.ini文件</span><br><span class="line">session.gc_maxlifetime = 3600</span><br><span class="line"></span><br><span class="line">警告信息：</span><br><span class="line">Checking max. execution time (Parameter max_execution_time)</span><br><span class="line">30 seconds - We suggest 120 seconds in order to manage hundred of test cases (edit php.ini)</span><br><span class="line">解决：</span><br><span class="line">修改php.ini文件</span><br><span class="line">max_execution_time = 12Checking LDAP libraryFailed! LDAP library not enabled. LDAP authentication cannot be used. (default internal authentication will works)</span><br><span class="line"></span><br><span class="line">警告信息：Checking if /var/testlink/logs/ directory exists [S]</span><br><span class="line">Failed!</span><br><span class="line">Checking if /var/testlink/upload_area/ directory exists [S]</span><br><span class="line">解决：</span><br><span class="line">修改/testlink/config_inc.php文件</span><br><span class="line">log_path = &apos;/var/www/html/testlink/logs/&apos;;</span><br><span class="line">$g_repositoryPath = &apos;/var/www/html/testlink/upload_area/&apos;;</span><br><span class="line">然后检查/var/www/html/testlink/下是否有logs文件夹和upload_area文件夹，没有则创建。</span><br><span class="line">检查这两个文件夹的权限，均赋权777</span><br><span class="line">chmod 777 logs/</span><br><span class="line">chmod 777 upload_area/</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://raw.githubusercontent.com/1139195320/imgs/8b908968111c3b8292200570a420089d0185eef3/testlink/3.png" alt=""></p><ol><li>在浏览器中直接输入地址访问登录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip/testlink/</span><br></pre></td></tr></table></figure></li></ol><p>默认登录账号/密码为：admin/admin</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://raw.githubusercontent.com/1139195320/imgs/8b908968111c3b8292200570a420089d0185eef3/testlink/4.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">警告信息：</span><br><span class="line">There are security warnings for your consideration. See details on file: C:/xampp/htdocs/testlink/logs/config_check.txt. To disable any reference to these checkings, set $tlCfg-&gt;config_check_warning_mode = &apos;SILENT&apos;;</span><br><span class="line">解决：</span><br><span class="line">vim /var/www/html/testlink/config.inc.php</span><br><span class="line">将$tlCfg-&gt;config_check_warning_mode = &apos;FILE&apos;;修改为：</span><br><span class="line">$tlCfg-&gt;config_check_warning_mode = &apos;SILENT&apos;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;TestLink&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是基于web的测试用例管理系统，主要功能是测试用例的创建、管理和执行，并且还提供了一些简单的统计功能。&lt;/p&gt;
&lt;p&gt;testlink这类
      
    
    </summary>
    
      <category term="测试" scheme="http://github.ymlsfly.xin/categories/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="工具" scheme="http://github.ymlsfly.xin/categories/%E6%B5%8B%E8%AF%95/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="安装配置" scheme="http://github.ymlsfly.xin/categories/%E6%B5%8B%E8%AF%95/%E5%B7%A5%E5%85%B7/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="testlink" scheme="http://github.ymlsfly.xin/tags/testlink/"/>
    
      <category term="测试" scheme="http://github.ymlsfly.xin/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="工具" scheme="http://github.ymlsfly.xin/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Docker梦工厂</title>
    <link href="http://github.ymlsfly.xin/2018/01/17/Docker%E6%A2%A6%E5%B7%A5%E5%8E%82/"/>
    <id>http://github.ymlsfly.xin/2018/01/17/Docker梦工厂/</id>
    <published>2018-01-17T12:39:23.000Z</published>
    <updated>2018-01-17T13:26:38.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Docker</p></blockquote><h2 id="小述Docker"><a href="#小述Docker" class="headerlink" title="小述Docker"></a>小述Docker</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h2 id="Centos7下部署Docker"><a href="#Centos7下部署Docker" class="headerlink" title="Centos7下部署Docker"></a>Centos7下部署Docker</h2><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><ol><li><p>首先检查内核版本，要求必须要在3.10+</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure></li><li><p>确保yum是最新的（可以忽略此步）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure></li><li><p>添加docker于yum仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">[dockerrepo]</span><br><span class="line">name=Docker Repository</span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/<span class="variable">$releasever</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-engine</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动验证"><a href="#启动验证" class="headerlink" title="启动验证"></a>启动验证</h3><p>启动/重启/停止的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure></p><p>验证<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br><span class="line">Client:</span><br><span class="line">Version:      17.05.0-ce</span><br><span class="line">API version:  1.29</span><br><span class="line">Go version:   go1.7.5</span><br><span class="line">Git commit:   89658be</span><br><span class="line">Built:        Thu May  4 22:06:25 2017</span><br><span class="line">OS/Arch:      linux/amd64</span><br><span class="line">Server:</span><br><span class="line">Version:      17.05.0-ce</span><br><span class="line">API version:  1.29 (minimum version 1.12)</span><br><span class="line">Go version:   go1.7.5</span><br><span class="line">Git commit:   89658be</span><br><span class="line">Built:        Thu May  4 22:06:25 2017</span><br><span class="line">OS/Arch:      linux/amd64</span><br><span class="line">Experimental: <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3><p>启动docker后可以查看此时拥有的镜像源：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image</span><br></pre></td></tr></table></figure></p><ol><li><p>下载拉取镜像源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//例：拉取tomcat镜像</span><br><span class="line">docker pull hub.c.163.com/library/tomcat:latest</span><br></pre></td></tr></table></figure></li><li><p>修改镜像名和标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag hub.c.163.com/library/tomcat:latest tomcat:v8.5</span><br></pre></td></tr></table></figure></li><li><p>删除原来的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f hub.c.163.com/library/tomcat:latest</span><br></pre></td></tr></table></figure></li><li><p>将该服务在后台运行起来（并指定由服务器58080端口对其映射）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 58080:8080 tomcat:v8.5</span><br></pre></td></tr></table></figure></li><li><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看运行中的容器信息</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure></li></ol><p>此时在浏览器即可访问此时运行的tomcat了，并且是在我们指定的58080端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:58080</span><br></pre></td></tr></table></figure></p><h2 id="与docker的亲密接触"><a href="#与docker的亲密接触" class="headerlink" title="与docker的亲密接触"></a>与docker的亲密接触</h2><h3 id="日常命令"><a href="#日常命令" class="headerlink" title="日常命令"></a>日常命令</h3><ol><li><p>登录（登出）一个Docker镜像仓库，如未指定仓库地址，默认为官方仓库Docker Hub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker login [option] [server]</span><br><span class="line">docker <span class="built_in">logout</span> [option] [server]</span><br><span class="line">//例：</span><br><span class="line">docker login -u 用户名 -p 密码</span><br></pre></td></tr></table></figure></li><li><p>从Docker Hub中查找镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker search [option] team</span><br><span class="line">--automated :只列出 automated build类型的镜像；</span><br><span class="line">--no-trunc :显示完整的镜像描述；</span><br><span class="line">-s :列出收藏数不小于指定值的镜像。</span><br></pre></td></tr></table></figure></li><li><p>将本地镜像上传到镜像仓库（必须先登录）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker push [options] name[:tag]</span><br><span class="line">    --<span class="built_in">disable</span>-content-trust 忽略镜像的校验，默认开启</span><br></pre></td></tr></table></figure></li><li><p>从镜像仓库中拉取或更新指定仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [options] name[:tag|@digest]</span><br></pre></td></tr></table></figure></li><li><p>列出本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images [options] [repository[:tag]]</span><br></pre></td></tr></table></figure></li><li><p>删除一个或多个本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [options] image [image ...]</span><br><span class="line">    -f 强制删除</span><br><span class="line">    --no-prune 不移除该镜像的过程镜像，默认移除</span><br></pre></td></tr></table></figure></li><li><p>标记本地镜像，将其归入某一仓库（修改镜像名）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [options] image[:tag] name[:tag]</span><br></pre></td></tr></table></figure></li><li><p>使用Dockerfile创建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker build [options] path | url | -</span><br><span class="line">    -f 指定要使用的Dockerfile的路径</span><br><span class="line">    -m 设置内存最大值</span><br><span class="line">    -q 安静模式，成功后只输出镜像ID</span><br><span class="line">    --rm 设置镜像成功后删除中间容器</span><br><span class="line">//例：</span><br><span class="line">docker build -t /fy/tomcat:v8.5 .</span><br></pre></td></tr></table></figure></li><li><p>查看指定镜像的创建历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> [options] image</span><br></pre></td></tr></table></figure></li><li><p>将指定镜像保存成tar归档文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save [options] image [image ...]</span><br><span class="line">    -o 输出到的文件</span><br></pre></td></tr></table></figure></li><li><p>从归档文件中创建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker import [options] file|url|- [repository[:tag]]</span><br><span class="line">    -c 应用docker指令创建镜像</span><br><span class="line">    -m 提交时的说明文字</span><br><span class="line">//例：</span><br><span class="line">docker import abc.tar fy/tomcat:v8.5</span><br></pre></td></tr></table></figure></li><li><p>创建一个新的容器但不启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create [options] image [<span class="built_in">command</span>] [arg ...]</span><br></pre></td></tr></table></figure></li><li><p>创建一个新的容器并运行一个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run [options] image [<span class="built_in">command</span>] [arg ...]</span><br><span class="line">    -d: 后台运行容器，并返回容器ID；</span><br><span class="line">    -i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">    -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">    --name=<span class="string">"nginx-lb"</span>: 为容器指定一个名称；</span><br><span class="line">    --dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line">    --dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class="line">    -h <span class="string">"mars"</span>: 指定容器的hostname；</span><br><span class="line">    -e username=<span class="string">"ritchie"</span>: 设置环境变量；</span><br><span class="line">    --env-file=[]: 从指定文件读入环境变量；</span><br><span class="line">    --cpuset=<span class="string">"0-2"</span> or --cpuset=<span class="string">"0,1,2"</span>: 绑定容器到指定CPU运行；</span><br><span class="line">    -m :设置容器使用内存最大值；</span><br><span class="line">    --net=<span class="string">"bridge"</span>: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</span><br><span class="line">    --link=[]: 添加链接到另一个容器；</span><br><span class="line">    --expose=[]: 开放一个端口或一组端口</span><br><span class="line">    -p：指定映射端口 服务器端口:容器端口</span><br><span class="line">    -P：系统自动为其分配映射端口</span><br></pre></td></tr></table></figure></li><li><p>杀掉一个运行中的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> [options] container [container ...]</span><br><span class="line">    -s 向容器发送一个信号</span><br></pre></td></tr></table></figure></li><li><p>删除一个或多少容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm [options] container [container ...]</span><br><span class="line">    -f 通过SIGKILL信号强制删除一个运行中的容器</span><br><span class="line">    -l 移除容器间的网络连接，而非容器本身（后接连接名，不是容器名）</span><br><span class="line">    -v 删除容器和与容器相关联的卷</span><br></pre></td></tr></table></figure></li><li><p>暂停/恢复容器中的所有进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pause [options] container [container ...]</span><br><span class="line">docker unpause [options] container [container ...]</span><br></pre></td></tr></table></figure></li><li><p>在运行的容器中执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [options] container <span class="built_in">command</span> [arg ...]</span><br><span class="line">    -d :分离模式: 在后台运行</span><br><span class="line">    -i :即使没有附加也保持STDIN 打开</span><br><span class="line">    -t :分配一个伪终端</span><br><span class="line">//例：在容器<span class="built_in">test</span>中以交互模式执行容器内的/root/run.sh脚本</span><br><span class="line">docker <span class="built_in">exec</span> -ti <span class="built_in">test</span> /bin/sh /root/run.sh</span><br><span class="line">//例：在容器<span class="built_in">test</span>中开启一个交互模式的终端（即进入<span class="built_in">test</span>容器）</span><br><span class="line">docker <span class="built_in">exec</span> -ti <span class="built_in">test</span> /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>列出容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker ps [options]</span><br><span class="line">    -a :显示所有的容器，包括未运行的。</span><br><span class="line">    -f :根据条件过滤显示的内容。</span><br><span class="line">    --format :指定返回值的模板文件。</span><br><span class="line">    -l :显示最近创建的容器。</span><br><span class="line">    -n :列出最近创建的n个容器。</span><br><span class="line">    --no-trunc :不截断输出。</span><br><span class="line">    -q :静默模式，只显示容器编号。</span><br><span class="line">    -s :显示总的文件大小。</span><br></pre></td></tr></table></figure></li><li><p>获取容器/镜像的元数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [options] name|id [name|id ...]</span><br><span class="line">    -f :指定返回值的模板文件。</span><br><span class="line">    -s :显示总的文件大小。</span><br><span class="line">    --<span class="built_in">type</span> :为指定类型返回JSON。</span><br></pre></td></tr></table></figure></li><li><p>查看容器中运行的进程信息，支持ps命令参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top [options] container [ps options]</span><br></pre></td></tr></table></figure></li><li><p>从服务器获取实时事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker events [options]</span><br><span class="line">    -f ：根据条件过滤事件；</span><br><span class="line">    --since ：从指定的时间戳后显示所有事件;</span><br><span class="line">    --until ：流水时间显示到指定的时间为止；</span><br></pre></td></tr></table></figure></li><li><p>获取容器的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker logs [options] container</span><br><span class="line">    -f : 跟踪日志输出</span><br><span class="line">    --since :显示某个开始时间的所有日志</span><br><span class="line">    -t : 显示时间戳</span><br><span class="line">    --tail :仅列出最新N条容器日志</span><br></pre></td></tr></table></figure></li><li><p>阻塞运行直到停止，最后打印它的退出代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">wait</span> [options] container [container ...]</span><br></pre></td></tr></table></figure></li><li><p>从容器创建一个新的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker commit [options] container [repository[:tag]]</span><br><span class="line">    -a :提交的镜像作者；</span><br><span class="line">    -c :使用Dockerfile指令来创建镜像；</span><br><span class="line">    -m :提交时的说明文字；</span><br><span class="line">    -p :在commit时，将容器暂停。</span><br></pre></td></tr></table></figure></li><li><p>容器与主机之间的数据拷贝</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp [options] container:src_path dest_path</span><br><span class="line">docker cp [options] src_path container:dest_path</span><br><span class="line">    -L 保持源目标中的链接</span><br></pre></td></tr></table></figure></li><li><p>检查容器里文件结构的更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff [options] container</span><br></pre></td></tr></table></figure></li></ol><h3 id="额外需求"><a href="#额外需求" class="headerlink" title="额外需求"></a>额外需求</h3><h4 id="给普通用户添加使用docker的权限"><a href="#给普通用户添加使用docker的权限" class="headerlink" title="给普通用户添加使用docker的权限"></a>给普通用户添加使用docker的权限</h4><p>这样普通就可以使用docker命令而无需root权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usermod -a -G docker 用户名</span><br><span class="line">systemctl restart docker</span><br><span class="line">注意：该用户需要重新登录才生效</span><br></pre></td></tr></table></figure></p><h4 id="制作自己的镜像"><a href="#制作自己的镜像" class="headerlink" title="制作自己的镜像"></a>制作自己的镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//此例为tomcat7.0</span><br><span class="line">//新建tomcat7.0的母文件夹</span><br><span class="line">mkdir dockerfile_tomcat7.0-2</span><br><span class="line">//将tomcat7.0和jdk1.7移入该文件夹</span><br><span class="line">cp tomcat7.0 dockerfile_tomcat7.0-2/tomcat7.0</span><br><span class="line">cp jdk1.7 dockerfile_tomcat7.0-2/jdk1.7</span><br><span class="line"><span class="built_in">cd</span> dockerfile_tomcat7.0-2</span><br><span class="line">//创建编辑Dockerfile文件</span><br><span class="line">vim Dockerfile</span><br><span class="line">//以下为Dockerfile文件内容-&gt;开始</span><br><span class="line"><span class="comment">#使用基础镜像centos:7.2（此镜像已拉取下来）</span></span><br><span class="line">FROM centos:v7.2</span><br><span class="line"><span class="comment">#指定镜像创建者信息</span></span><br><span class="line">MAINTAINER fy</span><br><span class="line"><span class="comment">#切换镜像的目录，进入/usr目录（基础镜像是一个linux系统，可参照linux查看相应目录）</span></span><br><span class="line">WORKDIR /usr</span><br><span class="line"><span class="comment">#在/usr/下创建java目录，用来存放jdk</span></span><br><span class="line">RUN mkdir java</span><br><span class="line"><span class="comment">#切换镜像的目录至/usr/java</span></span><br><span class="line">WORKDIR /usr/java</span><br><span class="line"><span class="comment">#在/usr/java下创建jdk目录，用来存放jdk文件</span></span><br><span class="line">RUN mkdir jdk</span><br><span class="line"><span class="comment">#切换镜像的目录至/usr/java/jdk</span></span><br><span class="line">WORKDIR /usr/java/jdk</span><br><span class="line"><span class="comment">#将宿主机的jdk1.7目录下的全部文件考入至镜像的/usr/java/jdk目录下</span></span><br><span class="line">ADD jdk1.7 /usr/java/jdk</span><br><span class="line"><span class="comment">#切换镜像的目录至/opt</span></span><br><span class="line">WORKDIR /opt</span><br><span class="line"><span class="comment">#在/opt下创建tomcat目录，用来存放tomcat文件</span></span><br><span class="line">RUN mkdir tomcat</span><br><span class="line"><span class="comment">#将宿主机的tomcat7.0目录下的全部文件考入至镜像的/opt/tomcat目录下</span></span><br><span class="line">ADD tomcat7.0 /opt/tomcat</span><br><span class="line"><span class="comment">#设置环境变量</span></span><br><span class="line">ENV JAVA_HOME=/usr/java/jdk</span><br><span class="line">ENV JAVA_BIN=/usr/java/jdk/bin</span><br><span class="line">ENV PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">ENV CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="comment">#设置容器启动时执行的操作</span></span><br><span class="line"></span><br><span class="line">CMD /opt/tomcat/bin/catalina.sh run</span><br><span class="line">//以上为Dockerfile文件的内容-&gt;结束</span><br><span class="line">//产生镜像</span><br><span class="line">docker build -t tomcat:v7.0-2 .</span><br><span class="line">//此时可以查看</span><br><span class="line">docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">tomcat              v7.0-2              5a9f994d6a14        About a minute ago   845MB</span><br><span class="line">//启动该tomcat（如果要看启动错误，就不要加-d后台参数）</span><br><span class="line">docker run -d -p 48080:8080 tomcat:v7.0-2</span><br></pre></td></tr></table></figure><p>报错解决：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">报错：在启动tomcat（./startup.sh）如果报</span><br><span class="line">-bash: ./startup.sh: Permission denied</span><br><span class="line">解决：解决（进入tomcat的bin目录赋权限）</span><br><span class="line">chmod u+x *.s</span><br><span class="line">报错：在启动时如果报</span><br><span class="line">The APR based Apache Tomcat Native library <span class="built_in">which</span> allows optimal</span><br><span class="line">解决：解决（下载tcnative-1.dll，放到tocat的bin目录下）</span><br><span class="line">wget http://tomcat.heanet.ie/native/1.1.12/binaries/win32/tcnative-1.dll</span><br></pre></td></tr></table></figure></p><h3 id="Dockerfile详解"><a href="#Dockerfile详解" class="headerlink" title="Dockerfile详解"></a>Dockerfile详解</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">常用：</span><br><span class="line">FROM：base镜像</span><br><span class="line">RUN：执行命令</span><br><span class="line">ADD：添加文件</span><br><span class="line">COPY：拷贝文件</span><br><span class="line">CMD：执行命令</span><br><span class="line">EXPOSE：暴露端口</span><br><span class="line">WORKDIR：指定路径</span><br><span class="line">MAINTAINER：维护者（作者）</span><br><span class="line">ENV：设定环境变量</span><br><span class="line">ENTRYPORT：容器入口</span><br><span class="line">USER：指定用户</span><br><span class="line">VOLUME：mount point</span><br><span class="line"></span><br><span class="line">命令详解：</span><br><span class="line">FROM</span><br><span class="line">功能为指定基础镜像，并且必须是第一条指令。</span><br><span class="line">如果不以任何镜像为基础，那么写法为：FROM scratch。</span><br><span class="line">同时意味着接下来所写的指令将作为镜像的第一层开始</span><br><span class="line">语法：</span><br><span class="line">FROM <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">FROM <span class="tag">&lt;<span class="name">image</span>&gt;</span>:<span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">FROM <span class="tag">&lt;<span class="name">image</span>&gt;</span>:<span class="tag">&lt;<span class="name">digest</span>&gt;</span></span><br><span class="line">三种写法，其中<span class="tag">&lt;<span class="name">tag</span>&gt;</span>和<span class="tag">&lt;<span class="name">digest</span>&gt;</span> 是可选项，如果没有选择，那么默认值为latest</span><br><span class="line">RUN</span><br><span class="line"> 功能为运行指定的命令</span><br><span class="line">RUN命令有两种格式</span><br><span class="line">1. RUN <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">2. RUN ["executable", "param1", "param2"]</span><br><span class="line">第一种后边直接跟shell命令</span><br><span class="line"></span><br><span class="line">* 在linux操作系统上默认 /bin/sh -c</span><br><span class="line">* 在windows操作系统上默认 cmd /S /C</span><br><span class="line"></span><br><span class="line">第二种是类似于函数调用。</span><br><span class="line">可将executable理解成为可执行文件，后面就是两个参数。</span><br><span class="line">两种写法比对：</span><br><span class="line"></span><br><span class="line">* RUN /bin/bash -c 'source $HOME/.bashrc; echo $HOME</span><br><span class="line">* RUN ["/bin/bash", "-c", "echo hello"]</span><br><span class="line"></span><br><span class="line">注意：多行命令不要写多个RUN，原因是Dockerfile中每一个指令都会建立一层.</span><br><span class="line"> 多少个RUN就构建了多少层镜像，会造成镜像的臃肿、多层，不仅仅增加了构件部署的时间，还容易出错。</span><br><span class="line">RUN书写时的换行符是\</span><br><span class="line">CMD</span><br><span class="line">功能为容器启动时要运行的命令</span><br><span class="line">语法有三种写法</span><br><span class="line">1. CMD ["executable","param1","param2"]</span><br><span class="line">2. CMD ["param1","param2"]</span><br><span class="line">3. CMD command param1 param2</span><br><span class="line">第三种比较好理解了，就时shell这种执行方式和写法</span><br><span class="line">第一种和第二种其实都是可执行文件加上参数的形式</span><br><span class="line">举例说明两种写法：</span><br><span class="line"></span><br><span class="line">* CMD [ "sh", "-c", "echo $HOME"</span><br><span class="line">* CMD [ "echo", "$HOME" ]</span><br><span class="line"></span><br><span class="line">补充细节：这里边包括参数的一定要用双引号，就是",不能是单引号。千万不能写成单引号。</span><br><span class="line">原因是参数传递后，docker解析的是一个JSON array</span><br><span class="line">RUN &amp; CMD</span><br><span class="line">不要把RUN和CMD搞混了。</span><br><span class="line">RUN是构件容器时就运行的命令以及提交运行结果</span><br><span class="line">CMD是容器启动时执行的命令，在构件时并不运行，构件时紧紧指定了这个命令到底是个什么样子</span><br><span class="line">LABEL</span><br><span class="line">功能是为镜像指定标签</span><br><span class="line">语法：</span><br><span class="line">LABEL <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> ...</span><br><span class="line"> 一个Dockerfile中可以有多个LABEL，如下：</span><br><span class="line">LABEL "com.example.vendor"="ACME Incorporated"</span><br><span class="line">LABEL com.example.label-with-value="foo"</span><br><span class="line">LABEL version="1.0"</span><br><span class="line">LABEL description="This text illustrates \</span><br><span class="line">that label-values can span multiple lines."</span><br><span class="line"> 但是并不建议这样写，最好就写成一行，如太长需要换行的话则使用\符号</span><br><span class="line">如下：</span><br><span class="line">LABEL multi.label1="value1" \</span><br><span class="line">multi.label2="value2" \</span><br><span class="line">other="value3"</span><br><span class="line">说明：LABEL会继承基础镜像种的LABEL，如遇到key相同，则值覆盖</span><br><span class="line">MAINTAINER</span><br><span class="line">指定作者</span><br><span class="line">语法：</span><br><span class="line">MAINTAINER <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><br><span class="line">EXPOSE</span><br><span class="line">功能为暴露容器运行时的监听端口给外部</span><br><span class="line">但是EXPOSE并不会使容器访问主机的端口</span><br><span class="line">如果想使得容器与主机的端口有映射关系，必须在容器启动的时候加上 -P参数</span><br><span class="line">ENV</span><br><span class="line">功能为设置环境变量</span><br><span class="line">语法有两种</span><br><span class="line">1. ENV <span class="tag">&lt;<span class="name">key</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">2. ENV <span class="tag">&lt;<span class="name">key</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span> ...</span><br><span class="line">两者的区别就是第一种是一次设置一个，第二种是一次设置多个</span><br><span class="line">ADD</span><br><span class="line"> 一个复制命令，把文件复制到镜像中。</span><br><span class="line">如果把虚拟机与容器想象成两台linux服务器的话，那么这个命令就类似于scp，只是scp需要加用户名和密码的权限验证，而ADD不用。</span><br><span class="line">语法如下：</span><br><span class="line">1. ADD <span class="tag">&lt;<span class="name">src</span>&gt;</span>... <span class="tag">&lt;<span class="name">dest</span>&gt;</span></span><br><span class="line">2. ADD ["<span class="tag">&lt;<span class="name">src</span>&gt;</span>",... "<span class="tag">&lt;<span class="name">dest</span>&gt;</span>"]</span><br><span class="line"><span class="tag">&lt;<span class="name">dest</span>&gt;</span>路径的填写可以是容器内的绝对路径，也可以是相对于工作目录的相对路径</span><br><span class="line"><span class="tag">&lt;<span class="name">src</span>&gt;</span>可以是一个本地文件或者是一个本地压缩文件，还可以是一个url</span><br><span class="line">如果把<span class="tag">&lt;<span class="name">src</span>&gt;</span>写成一个url，那么ADD就类似于wget命令</span><br><span class="line">如以下写法都是可以的：</span><br><span class="line"></span><br><span class="line">* ADD test relativeDir/</span><br><span class="line">* ADD test /relativeDir</span><br><span class="line">* ADD http://example.com/foobar /</span><br><span class="line"></span><br><span class="line">尽量不要把<span class="tag">&lt;<span class="name">scr</span>&gt;</span>写成一个文件夹，如果<span class="tag">&lt;<span class="name">src</span>&gt;</span>是一个文件夹了，复制整个目录的内容,包括文件系统元数据</span><br><span class="line">COPY</span><br><span class="line">又是一个复制命令</span><br><span class="line">语法如下：</span><br><span class="line">1. COPY <span class="tag">&lt;<span class="name">src</span>&gt;</span>... <span class="tag">&lt;<span class="name">dest</span>&gt;</span></span><br><span class="line">2. COPY ["<span class="tag">&lt;<span class="name">src</span>&gt;</span>",... "<span class="tag">&lt;<span class="name">dest</span>&gt;</span>"]</span><br><span class="line">与ADD的区别</span><br><span class="line">COPY的<span class="tag">&lt;<span class="name">src</span>&gt;</span>只能是本地文件，其他用法一致</span><br><span class="line">ENTRYPOINT</span><br><span class="line">功能是启动时的默认命令</span><br><span class="line">语法如下：</span><br><span class="line">1. ENTRYPOINT ["executable", "param1", "param2"]</span><br><span class="line">2. ENTRYPOINT command param1 param2</span><br><span class="line">第二种就是写shell</span><br><span class="line">第一种就是可执行文件加参数</span><br><span class="line">与CMD比较说明（这俩命令太像了，而且还可以配合使用）：</span><br><span class="line">1. 相同点：</span><br><span class="line"></span><br><span class="line">* 只能写一条，如果写了多条，那么只有最后一条生效</span><br><span class="line">* 容器启动时才运行，运行时机相同</span><br><span class="line"></span><br><span class="line">2. 不同点：</span><br><span class="line"></span><br><span class="line">*  ENTRYPOINT不会被运行的command覆盖，而CMD则会被覆盖</span><br><span class="line">*  如果我们在Dockerfile种同时写了ENTRYPOINT和CMD，并且CMD指令不是一个完整的可执行命令，那么CMD指定的内容将会作为ENTRYPOINT的参数</span><br><span class="line"></span><br><span class="line">如下：</span><br><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT ["top", "-b"]</span><br><span class="line">CMD ["-c"]</span><br><span class="line"></span><br><span class="line">* 如果我们在Dockerfile种同时写了ENTRYPOINT和CMD，并且CMD是一个完整的指令，那么它们两个会互相覆盖，谁在最后谁生效</span><br><span class="line"></span><br><span class="line">如下：</span><br><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT ["top", "-b"]</span><br><span class="line">CMD ls -al</span><br><span class="line">那么将执行ls -al ,top -b不会执行。</span><br><span class="line">VOLUME</span><br><span class="line">可实现挂载功能，可以将内地文件夹或者其他容器中的文件夹挂在到这个容器中</span><br><span class="line">语法为：</span><br><span class="line">VOLUME ["/data"] </span><br><span class="line">说明：</span><br><span class="line">   ["/data"]可以是一个JsonArray ，也可以是多个值。所以如下几种写法都是正确的</span><br><span class="line">VOLUME ["/var/log/"]</span><br><span class="line">VOLUME /var/log</span><br><span class="line">VOLUME /var/log /var/db</span><br><span class="line">一般的使用场景为需要持久化存储数据时</span><br><span class="line">容器使用的是AUFS，这种文件系统不能持久化数据，当容器关闭后，所有的更改都会丢失。</span><br><span class="line">所以当数据需要持久化时用这个命令。</span><br><span class="line">USER</span><br><span class="line">设置启动容器的用户，可以是用户名或UID，所以，只有下面的两种写法是正确的</span><br><span class="line"></span><br><span class="line">* USER daemo</span><br><span class="line">* USER UID</span><br><span class="line"></span><br><span class="line">注意：如果设置了容器以daemon用户去运行，那么RUN, CMD 和 ENTRYPOINT 都会以这个用户去运行</span><br><span class="line">WORKDIR</span><br><span class="line">语法：</span><br><span class="line">WORKDIR /path/to/workdir</span><br><span class="line">设置工作目录，对RUN,CMD,ENTRYPOINT,COPY,ADD生效。如果不存在则会创建，也可以设置多次。</span><br><span class="line">如：</span><br><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN pwd</span><br><span class="line">pwd执行的结果是/a/b/c</span><br><span class="line">WORKDIR也可以解析环境变量</span><br><span class="line">如：</span><br><span class="line">ENV DIRPATH /path</span><br><span class="line">WORKDIR $DIRPATH/$DIRNAME</span><br><span class="line">RUN pwd</span><br><span class="line">pwd的执行结果是/path/$DIRNAME</span><br><span class="line">ARG</span><br><span class="line">语法：</span><br><span class="line">ARG <span class="tag">&lt;<span class="name">name</span>&gt;</span>[=<span class="tag">&lt;<span class="name">default</span> <span class="attr">value</span>&gt;</span>]</span><br><span class="line">设置变量命令，ARG命令定义了一个变量，在docker build创建镜像的时候，使用 --build-arg <span class="tag">&lt;<span class="name">varname</span>&gt;</span>=<span class="tag">&lt;<span class="name">value</span>&gt;</span>来指定参数</span><br><span class="line">如果用户在build镜像时指定了一个参数没有定义在Dockerfile中，那么将有一个Warning</span><br><span class="line">提示如下：</span><br><span class="line">[Warning] One or more build-args [foo] were not consumed.</span><br><span class="line">我们可以定义一个或多个参数，如下：</span><br><span class="line">FROM busybox</span><br><span class="line">ARG user1</span><br><span class="line">ARG buildno</span><br><span class="line">...</span><br><span class="line">也可以给参数一个默认值：</span><br><span class="line">FROM busybox</span><br><span class="line">ARG user1=someuser</span><br><span class="line">ARG buildno=1</span><br><span class="line">...</span><br><span class="line">如果我们给了ARG定义的参数默认值，那么当build镜像时没有指定参数值，将会使用这个默认值</span><br><span class="line">ONBUILD</span><br><span class="line">语法：</span><br><span class="line">ONBUILD [INSTRUCTION]</span><br><span class="line">这个命令只对当前镜像的子镜像生效。</span><br><span class="line">比如当前镜像为A，在Dockerfile种添加：</span><br><span class="line">ONBUILD RUN ls -al</span><br><span class="line">这个 ls -al 命令不会在A镜像构建或启动的时候执行</span><br><span class="line">此时有一个镜像B是基于A镜像构建的，那么这个ls -al 命令会在B镜像构建的时候被执行。</span><br><span class="line">STOPSIGNAL</span><br><span class="line">语法：</span><br><span class="line">STOPSIGNAL signal</span><br><span class="line">STOPSIGNAL命令是的作用是当容器退出时给系统发送什么样的指令</span><br><span class="line">HEALTHCHECK</span><br><span class="line"> 容器健康状况检查命令</span><br><span class="line">语法有两种：</span><br><span class="line">1. HEALTHCHECK [OPTIONS] CMD command</span><br><span class="line">2. HEALTHCHECK NONE</span><br><span class="line">第一个的功能是在容器内部运行一个命令来检查容器的健康状况</span><br><span class="line">第二个的功能是在基础镜像中取消健康检查命令</span><br><span class="line">[OPTIONS]的选项支持以下三种选项：</span><br><span class="line">    --interval=DURATION 两次检查默认的时间间隔为30秒</span><br><span class="line">    --timeout=DURATION 健康检查命令运行超时时长，默认30秒</span><br><span class="line">    --retries=N 当连续失败指定次数后，则容器被认为是不健康的，状态为unhealthy，默认次数是3</span><br><span class="line">注意：</span><br><span class="line">HEALTHCHECK命令只能出现一次，如果出现了多次，只有最后一个生效。</span><br><span class="line">CMD后边的命令的返回值决定了本次健康检查是否成功，具体的返回值如下：</span><br><span class="line">0: success - 表示容器是健康的</span><br><span class="line">1: unhealthy - 表示容器已经不能工作了</span><br><span class="line">2: reserved - 保留值</span><br><span class="line">例子：</span><br><span class="line">HEALTHCHECK --interval=5m --timeout=3s \</span><br><span class="line">CMD curl -f http://localhost/ || exit 1</span><br><span class="line">健康检查命令是：curl -f http://localhost/ || exit 1</span><br><span class="line">两次检查的间隔时间是5秒</span><br><span class="line">命令超时时间为3秒</span><br></pre></td></tr></table></figure><p>上面知识点很多，字太多，手敲有点累，博主直接从笔记中copy出来，还望读者见谅！</p><font color="aqua">希望大家在Docker梦工厂中畅游后能有所收获，也不负博主整理编辑了半天，hhh~</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;小述Docker&quot;&gt;&lt;a href=&quot;#小述Docker&quot; class=&quot;headerlink&quot; title=&quot;小述Docker&quot;&gt;
      
    
    </summary>
    
      <category term="docker" scheme="http://github.ymlsfly.xin/categories/docker/"/>
    
    
      <category term="docker" scheme="http://github.ymlsfly.xin/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Maven初印象</title>
    <link href="http://github.ymlsfly.xin/2018/01/17/Maven%E5%88%9D%E5%8D%B0%E8%B1%A1/"/>
    <id>http://github.ymlsfly.xin/2018/01/17/Maven初印象/</id>
    <published>2018-01-17T11:13:30.000Z</published>
    <updated>2018-01-17T12:33:30.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Maven</p></blockquote><p> 项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。</p><p> 博主跟大家一样，一个普通的java战场的小兵，从对maven丝毫不熟悉，至少到了会用，从怕maven到了喜欢maven，无maven不项目，个人观点。相信各位读者在学习了maven，熟悉了maven以后，一定会跟博主一样爱上maven~</p><hr><h2 id="预备…"><a href="#预备…" class="headerlink" title="预备…"></a>预备…</h2><p> 首先小叙下maven的安装配置。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p> 进入maven的官网<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a>  下载maven<br> <img src="https://github.com/1139195320/imgs/blob/master/maven/1.png?raw=true" alt=""><br> 上面两个是编译好的二进制包，而后两个是源码包，这里选择windows上用的zip包。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p> 下载到本地后，解压缩到系统盘以外的盘，修改maven的conf文件夹下的settings.xml文件:</p><p>这里将maven源换成国内的阿里maven源，在下载速度上会大大加快。<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- maven默认的本地仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>F:\mavencangku<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置maven的镜像源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>;</span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同时还需要将该settings.xml文件拷贝一份到C:\Users\Administrator.m2<br>这个目录是maven默认的配置文件的目录，当你在其他软件中配置maven时默认指向的便是这个目录，所以复制一份放在这个文件夹会有一定的方便。</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>和以往的JAVA_HOME一样，配置maven的家目录：  </p><ol><li>MAVEN_HOME = maven的安装（或说放置）的目录<br>（例如博主配置的：D:\apache-maven-3.5.0）</li><li>PATH 添加：;%MAVEN_HOME%\bin;</li></ol><p>此时可以在cmd控制台输入：mvn -v 或 mvn -version 查看maven的版本并检验maven的安装和配置。</p><hr><h2 id="解剖maven"><a href="#解剖maven" class="headerlink" title="解剖maven"></a>解剖maven</h2><h3 id="maven目录结构"><a href="#maven目录结构" class="headerlink" title="maven目录结构"></a>maven目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pom.xml：用于定义或者添加jar包的依赖</span><br><span class="line">src-main：用于存放java源文件</span><br><span class="line">src-test：用于存放测试用例</span><br><span class="line">src-sources：用于存放资源文件</span><br></pre></td></tr></table></figure><h3 id="pom-xml文件介绍"><a href="#pom-xml文件介绍" class="headerlink" title="pom.xml文件介绍"></a>pom.xml文件介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groupId：包的名称。</span><br><span class="line">artifactId：所述的项目名称，由于有的项目并不是一个jar包构成的，而是由很多的jar包组成的。因此这个groupId就是整个项目的名称。</span><br><span class="line">version：版本号。</span><br><span class="line">packaging：包的类型，一般都是jar，也可以是war之类的。如果不填，默认就是jar。</span><br><span class="line">name和url：一个是名称，一个是maven的地址。</span><br></pre></td></tr></table></figure><h2 id="Eclipse中Maven常用命令"><a href="#Eclipse中Maven常用命令" class="headerlink" title="Eclipse中Maven常用命令"></a>Eclipse中Maven常用命令</h2><p>也许不会用到，但还是知道比较好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Maven Build:</span><br><span class="line">这个命令用于编译Maven工程，执行命令后会在target文件夹中的classes中生成对应的class文件。</span><br><span class="line">Maven Clean:</span><br><span class="line">删除target文件夹，即删除生成的package包以及class等文件。</span><br><span class="line">Maven Test:</span><br><span class="line">先自动进行编译，在运行所有的测试用例。</span><br><span class="line">Maven install:</span><br><span class="line">发布生成对应的package包。</span><br></pre></td></tr></table></figure></p><h2 id="依赖dependency"><a href="#依赖dependency" class="headerlink" title="依赖dependency"></a>依赖dependency</h2><h3 id="依赖的scope属性"><a href="#依赖的scope属性" class="headerlink" title="依赖的scope属性"></a>依赖的scope属性</h3><p>依赖除了依赖的坐标，还有个不是必须的scope属性，它的属性值有如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.compile：默认值 他表示被依赖项目需要参与当前项目的编译，还有后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去</span><br><span class="line">2.test：依赖项目仅仅参与测试相关的工作，包括测试代码的编译和执行，不会被打包，例如：junit</span><br><span class="line">3.runtime：表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。与compile相比，跳过了编译而已。例如JDBC驱动，适用运行和测试阶段</span><br><span class="line">4.provided：打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作</span><br><span class="line">5.system：从参与度来说，和provided相同，不过被依赖项不会从maven仓库下载，而是从本地文件系统拿。需要添加systemPath的属性来定义路径</span><br></pre></td></tr></table></figure></p><h3 id="去除依赖"><a href="#去除依赖" class="headerlink" title="去除依赖"></a>去除依赖</h3><h4 id="项目间传递"><a href="#项目间传递" class="headerlink" title="项目间传递"></a>项目间传递</h4><p>如果我的当前项目是project1，project1要依赖project2，project1依赖project2的配置中加上 \<optional>true\</optional>，表示依赖可选：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.projecct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>那么以后所有声明依赖project1的项目如果也依赖project2，就必须写手动声明。比如project3依赖project1和project2，如果project3只声明了对project1的依赖，那么project2不会自动加入依赖，需要重新声明对project2的依赖。<br>这种方式排除不了我项目中对第三方jar包所依赖的其他依赖，因为我不可能去修改第三方jar包的pom文件，所以只适合在项目组内部使用。</p><h4 id="依赖过滤"><a href="#依赖过滤" class="headerlink" title="依赖过滤"></a>依赖过滤</h4><ol><li><p>单依赖过滤<br>同依赖过滤直接处理：可以过滤一个或者多个，如果过滤多个要写多个\<exclusion>,此时就不太适用。</exclusion></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.94.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多依赖过滤<br>不多解释，相比单依赖过滤，当然就是适用于过滤比较多的依赖啦。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.94.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>*<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>*<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="下面再附上博主整理的项目版本号和语言划分说明："><a href="#下面再附上博主整理的项目版本号和语言划分说明：" class="headerlink" title="下面再附上博主整理的项目版本号和语言划分说明："></a>下面再附上博主整理的项目版本号和语言划分说明：</h3><h4 id="版本号说明"><a href="#版本号说明" class="headerlink" title="版本号说明"></a>版本号说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">当前版本号：1.0.0-SNAPSHOT</span><br><span class="line">    本项目采用通用的三级版本号，版本号格式是[主版本号].[副版本号].[修复版本号]-[稳定状态]，如：1.0.0-SNAPSHOT。（主、副、增量）</span><br><span class="line">    1. [主版本号] 是从1开始的整数，表示重大的项目结构和概念调整，一般不会轻易修改该版本号，不同的主版本号不承诺能够兼容。</span><br><span class="line">    2. [副版本号]是从0开始的整数，表示项目的功能特性增加或者BUG修复，同一个[主版本号]下的不同副版本是能够向下兼容的。</span><br><span class="line">    3. [修复版本号]的只是从0开始的整数，一般只是小的BUG修复，细微功能调整。</span><br><span class="line">    4. [稳定状态]的可选值有：SNAPSHOT、RC[序号]、RELEASE。SNAPSHOT表示开发快照版本，该版本未经过严格测试，可能呢不稳定，不宜用于生产环境；RC[序号]表示可选非正式发布版本，比较稳定，但是非正式版本，可能存在问题，可能有多个RC版本，RC序号会有多个；RELEASE表示正式发布版本，经过了严格测试，可以用于生产环境，请尽量用该版本作为生产使用</span><br><span class="line">    Alpha：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。</span><br><span class="line">Beta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。</span><br><span class="line">RC：(Release　Candidate) 顾名思义么 ! 用在软件上就是候选版本。系统平台上就是发行候选版本。RC版不会再加入新的功能了，主要着重于除错。</span><br><span class="line">GA:General Availability,正式发布的版本，在国外都是用GA来说明release版本的。</span><br><span class="line">RTM：(Release to Manufacture)是给工厂大量压片的版本，内容跟正式版是一样的，不过RTM版也有出限制、评估版的。但是和正式版本的主要程序代码都是一样的。</span><br><span class="line">OEM：是给计算机厂商随着计算机贩卖的，也就是随机版。只能随机器出货，不能零售。只能全新安装，不能从旧有操作系统升级。包装不像零售版精美，通常只有一面CD和说明书(授权书)。 </span><br><span class="line">RVL：号称是正式版，其实RVL根本不是版本的名称。它是中文版/英文版文档破解出来的。 </span><br><span class="line">EVAL：而流通在网络上的EVAL版，与“评估版”类似，功能上和零售版没有区别。 </span><br><span class="line">RTL：Retail(零售版)是真正的正式版，正式上架零售版。在安装盘的i386文件夹里有一个eula.txt，最后有一行EULAID，就是你的 版本。比如简体中文正式版是EULAID:WX.4_PRO_RTL_CN，繁体中文正式版是WX.4_PRO_RTL_TW。其中：如果是WX.开头是 正式版，WB.开头是测试版。_PRE，代表家庭版；_PRO，代表专业版。</span><br><span class="line"></span><br><span class="line">α、β、λ常用来表示软件测试过 程中的三个阶段，α是第一阶段，一般只供内部测试使用；β是第二个阶段，已经消除了软件中大部分的不完善之处，但仍有可能还存在缺陷和漏洞，一般只提供给 特定的用户群来测试使用；λ是第三个阶段，此时产品已经相当成熟，只需在个别地方再做进一步的优化处理即可上市发行。</span><br><span class="line"></span><br><span class="line">Alpha -- 内部测试版　</span><br><span class="line">Beta -- 公开测试版</span><br><span class="line">Cardware -- 属共享软件的一种，只要给作者回复一封电邮或明信片即可。目前这种形式已不多见。</span><br><span class="line">CHT -- 繁体中文版</span><br><span class="line">CN/SPC -- 简体中文版</span><br><span class="line">EN -- 英文版</span><br><span class="line">Corporation &amp; Enterprise -- 企业版</span><br><span class="line">Deluxe -- 豪华版</span><br><span class="line">Demo -- 演示版</span><br><span class="line">Dev -- 开发专用版，程序员版本。</span><br><span class="line">Enhance -- 增强版&amp;；加强版 （属于正式版）</span><br><span class="line">Express&amp;Special --特别版</span><br><span class="line">Final -- 最终版</span><br><span class="line">Free -- 免费版</span><br><span class="line">Full version -- 完全版 （属于正式版）</span><br><span class="line">Green -- 绿色版&amp;；破解版</span><br><span class="line">Mini -- 迷你版&amp;；精简版，只有最基本的功能，占用资源较少</span><br><span class="line">Multi-language -- 多语言版</span><br><span class="line">Plus -- 属增强版，不过大部分是在程序界面及功能上增强。</span><br><span class="line">Preview --预览版</span><br><span class="line">Professional -- 专业版</span><br><span class="line">Regged/Registered -- 已注册版</span><br><span class="line">Release -- 发行版</span><br><span class="line">Retail/RTM -- 零售版</span><br><span class="line">Shareware -- 共享版</span><br><span class="line">Stable -- 稳定版</span><br><span class="line">Standard -- 标准版</span><br><span class="line">Ultimate -- 旗舰版</span><br><span class="line">Upgrade -- 升级版</span><br></pre></td></tr></table></figure><p>语言划分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SC：Simplified　Chinese简体中文版。 </span><br><span class="line">CN　：　简体中文版 </span><br><span class="line">GBK：简体中文汉字内码扩展规范版。 </span><br><span class="line">TC：Traditional　Chinese繁体中文版。 </span><br><span class="line">CHT　：　繁体中文版 </span><br><span class="line">BIG5：繁体中文大五码版。 </span><br><span class="line">EN　：　英文版 </span><br><span class="line">Multilanguage　：　多语言版 </span><br><span class="line">UTF8：Unicode　Transformation　Format　8　bit，对现有的中文系统不是好的解决方案。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Maven&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。&lt;/p&gt;
&lt;p&gt; 博主跟大家一样，一个普通的ja
      
    
    </summary>
    
      <category term="maven" scheme="http://github.ymlsfly.xin/categories/maven/"/>
    
      <category term="理论" scheme="http://github.ymlsfly.xin/categories/maven/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="maven" scheme="http://github.ymlsfly.xin/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>XAMPP安装</title>
    <link href="http://github.ymlsfly.xin/2018/01/17/XAMPP%E5%AE%89%E8%A3%85/"/>
    <id>http://github.ymlsfly.xin/2018/01/17/XAMPP安装/</id>
    <published>2018-01-17T06:15:43.000Z</published>
    <updated>2018-01-17T07:51:14.980Z</updated>
    
    <content type="html"><![CDATA[<h4 id="XAMPP（Apache-MySQL-PHP-PERL）是一个功能强大的建站集成软件包。这个软件包原来的名字是-LAMPP，但是为了避免误解，最新的几个版本就改名为-XAMPP-了。它可以在Windows、Linux、Solaris、Mac-OS-X-等多种操作系统下安装使用，支持多语言：英文、简体中文、繁体中文、韩文、俄文、日文等。"><a href="#XAMPP（Apache-MySQL-PHP-PERL）是一个功能强大的建站集成软件包。这个软件包原来的名字是-LAMPP，但是为了避免误解，最新的几个版本就改名为-XAMPP-了。它可以在Windows、Linux、Solaris、Mac-OS-X-等多种操作系统下安装使用，支持多语言：英文、简体中文、繁体中文、韩文、俄文、日文等。" class="headerlink" title="XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。这个软件包原来的名字是 LAMPP，但是为了避免误解，最新的几个版本就改名为 XAMPP 了。它可以在Windows、Linux、Solaris、Mac OS X 等多种操作系统下安装使用，支持多语言：英文、简体中文、繁体中文、韩文、俄文、日文等。"></a>XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。这个软件包原来的名字是 LAMPP，但是为了避免误解，最新的几个版本就改名为 XAMPP 了。它可以在Windows、Linux、Solaris、Mac OS X 等多种操作系统下安装使用，支持多语言：英文、简体中文、繁体中文、韩文、俄文、日文等。</h4><h3 id="这款软件是免费的，从网上直接下载，下一步下一步的安装。"><a href="#这款软件是免费的，从网上直接下载，下一步下一步的安装。" class="headerlink" title="这款软件是免费的，从网上直接下载，下一步下一步的安装。"></a>这款软件是免费的，从网上直接下载，下一步下一步的安装。</h3><p><img src="https://raw.githubusercontent.com/1139195320/imgs/9287bfd6683cc84211711e43b993078e83757c41/xampp/1.png" alt=""><br><img src="https://raw.githubusercontent.com/1139195320/imgs/9287bfd6683cc84211711e43b993078e83757c41/xampp/2.png" alt=""><br><img src="https://raw.githubusercontent.com/1139195320/imgs/9287bfd6683cc84211711e43b993078e83757c41/xampp/3.png" alt=""></p><h3 id="安装后即可启动"><a href="#安装后即可启动" class="headerlink" title="安装后即可启动"></a>安装后即可启动</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">08</span>:<span class="number">41</span>:<span class="number">23</span>  [mysql]    Problem detected!</span><br><span class="line"><span class="number">08</span>:<span class="number">41</span>:<span class="number">23</span>  [mysql]    Port <span class="number">3306</span> <span class="keyword">in</span> use by ""D:\MySQL\MySQL Server <span class="number">5</span>.<span class="number">6</span>\bin\mysqld.exe" --defaults-file="D:\MySQL\MySQL Server <span class="number">5</span>.<span class="number">6</span>\my.ini" MySQL56"!</span><br><span class="line"><span class="number">08</span>:<span class="number">41</span>:<span class="number">23</span>  [mysql]    MySQL WILL <span class="keyword">NOT</span> <span class="built_in">start</span> without the configured ports free!</span><br><span class="line"><span class="number">08</span>:<span class="number">41</span>:<span class="number">23</span>  [mysql]    You need to uninstall/disable/reconfigure the blocking application</span><br><span class="line"><span class="number">08</span>:<span class="number">41</span>:<span class="number">23</span>  [mysql]    or reconfigure MySQL and the Control Panel to listen on a different port</span><br></pre></td></tr></table></figure><p> 这是博主安装打开xampp后xampp控制台的输出，很显然报错了，错误信息是说mysql的端口冲突了。因为博主的本机已安装有mysql，并设置了自启模式，占用了3306端口。</p><p>解决方法：在本地服务中找到MySQL，将其停止，即可祛除其对xampp中自带的MySQL的冲突。</p><p><img src="https://raw.githubusercontent.com/1139195320/imgs/9287bfd6683cc84211711e43b993078e83757c41/xampp/4.png" alt=""></p><h3 id="检查端口冲突"><a href="#检查端口冲突" class="headerlink" title="检查端口冲突"></a>检查端口冲突</h3><p>安装完xampp后，可以先将其中的服务，如Apache、MySQL等启动试试，看看是否出现端口冲突。<br>由于我本机已装有Apache，由于有用而不能卸，故需要对xampp中的Apache端口进行修改。</p><h4 id="解决Apache端口冲突"><a href="#解决Apache端口冲突" class="headerlink" title="解决Apache端口冲突"></a>解决Apache端口冲突</h4><p><img src="https://raw.githubusercontent.com/1139195320/imgs/9287bfd6683cc84211711e43b993078e83757c41/xampp/5.png" alt=""></p><p>首先得修改xampp中的配置，如上，我已将Apache的hppd端口改为800，hppd-ssh的端口改为4430，这一步之后还得修改Apache配置文件：</p><p><img src="https://raw.githubusercontent.com/1139195320/imgs/9287bfd6683cc84211711e43b993078e83757c41/xampp/6.png" alt=""></p><p>打开hppd.conf文件，找到里面配置端口为80的位置，可以快速搜索，然后将其端口修改为800<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Listen 12.34.56.78:800</span><br><span class="line">Listen 800</span><br><span class="line">...</span><br><span class="line">ServerName localhost:800</span><br></pre></td></tr></table></figure></p><p>打开hppd-ssh.conf文件，找到里面配置端口为443的位置，可以快速搜索，然后将其端口修改为4430<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Listen 4430</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> <span class="attr">_default_:4430</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">ServerName www.example.com:4430</span><br></pre></td></tr></table></figure></p><p>修改完端口后，再在xampp控制台启动Apache和MySQL：<br><img src="https://raw.githubusercontent.com/1139195320/imgs/9287bfd6683cc84211711e43b993078e83757c41/xampp/7.png" alt=""></p><h4 id="如果上面不存在端口冲突，则不需要修改配置文件中的端口，上图中的Port-s-则显示为：80-443"><a href="#如果上面不存在端口冲突，则不需要修改配置文件中的端口，上图中的Port-s-则显示为：80-443" class="headerlink" title="如果上面不存在端口冲突，则不需要修改配置文件中的端口，上图中的Port(s)则显示为：80,443"></a>如果上面不存在端口冲突，则不需要修改配置文件中的端口，上图中的Port(s)则显示为：80,443</h4><h4 id="修改MySQL默认密码"><a href="#修改MySQL默认密码" class="headerlink" title="修改MySQL默认密码"></a>修改MySQL默认密码</h4><p> 因为安装xampp后的mysql默认密码为空，在浏览器地址上输入<a href="http://localhost:800/phpmyadmin，能登录到phpmyadmin。进入到数据库的控制面板，然后选择名称为mysql的数据库，可从" target="_blank" rel="noopener">http://localhost:800/phpmyadmin，能登录到phpmyadmin。进入到数据库的控制面板，然后选择名称为mysql的数据库，可从</a> user表中看出，root用户的密码为空，接下来使用sql语句来修改root的密码，如此处修改为root，注意此处使用了mysql的password函数，存入库中的密码是已经进行了加密的密文。<br> 可以通过执行下面这句sql语句来修改：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user SET password=PASSWORD(&apos;root&apos;) WHERE user=&apos;root&apos;</span><br></pre></td></tr></table></figure></p><p> <img src="https://raw.githubusercontent.com/1139195320/imgs/9287bfd6683cc84211711e43b993078e83757c41/xampp/8.png" alt=""></p><h4 id="此时密码修改任务还未完成，打开xampp-phpMyAdmin目录下的config-inc-php文件进行如下修改："><a href="#此时密码修改任务还未完成，打开xampp-phpMyAdmin目录下的config-inc-php文件进行如下修改：" class="headerlink" title="此时密码修改任务还未完成，打开xampp\phpMyAdmin目录下的config.inc.php文件进行如下修改："></a>此时密码修改任务还未完成，打开xampp\phpMyAdmin目录下的config.inc.php文件进行如下修改：</h4><ol><li><p>设置参数，密码一定和自己修改的root的密码一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$cfg[<span class="string">'Servers'</span>][$i][<span class="string">'user'</span>] = <span class="string">'root'</span>;</span><br><span class="line">$cfg[<span class="string">'Servers'</span>][$i][<span class="string">'password'</span>] = <span class="string">'root'</span>;</span><br><span class="line">$cfg[<span class="string">'Servers'</span>][$i][<span class="string">'extension'</span>] = <span class="string">'mysqli'</span>;</span><br></pre></td></tr></table></figure></li><li><p>取消其（phpmyadmin）自动登录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $cfg['Servers'][$i]['auth_type'] = 'config';</span></span><br><span class="line">$cfg[<span class="string">'Servers'</span>][$i][<span class="string">'auth_type'</span>] = <span class="string">'cookie'</span>;</span><br></pre></td></tr></table></figure></li><li><p>设置phpmyadmin在管理员下新增用户时可以设置密码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#$cfg['Servers'][$i]['AllowNoPassword'] = false;</span></span><br></pre></td></tr></table></figure></li></ol><p>到此你的xampp就已经安装完毕了，可以启动xampp控制台，启动Apache和MySQL，然后在网页输入：<br>【<a href="http://localhost:端口】" target="_blank" rel="noopener">http://localhost:端口】</a>   访问Apache<br>【<a href="http://localhost:端口/phpmyadmin】" target="_blank" rel="noopener">http://localhost:端口/phpmyadmin】</a>    访问页端MySQL</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;XAMPP（Apache-MySQL-PHP-PERL）是一个功能强大的建站集成软件包。这个软件包原来的名字是-LAMPP，但是为了避免误解，最新的几个版本就改名为-XAMPP-了。它可以在Windows、Linux、Solaris、Mac-OS-X-等多种操作系
      
    
    </summary>
    
      <category term="软件安装" scheme="http://github.ymlsfly.xin/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="xampp" scheme="http://github.ymlsfly.xin/tags/xampp/"/>
    
      <category term="Windows安装软件" scheme="http://github.ymlsfly.xin/tags/Windows%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="server" scheme="http://github.ymlsfly.xin/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>用Java来发邮件</title>
    <link href="http://github.ymlsfly.xin/2018/01/16/%E7%94%A8Java%E6%9D%A5%E5%8F%91%E9%82%AE%E4%BB%B6/"/>
    <id>http://github.ymlsfly.xin/2018/01/16/用Java来发邮件/</id>
    <published>2018-01-16T13:10:45.000Z</published>
    <updated>2018-01-16T15:04:33.192Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>强大的Java也是可以发邮件的</p></blockquote><h1 id="案例一、在自己本机上搭邮件服务器体验邮件的发送接收"><a href="#案例一、在自己本机上搭邮件服务器体验邮件的发送接收" class="headerlink" title="案例一、在自己本机上搭邮件服务器体验邮件的发送接收"></a>案例一、在自己本机上搭邮件服务器体验邮件的发送接收</h1><h2 id="预备条件："><a href="#预备条件：" class="headerlink" title="预备条件："></a>预备条件：</h2><ol><li>先下载好Foxmail和易邮邮件服务器，可以直接百度下载，很方便，免费软件</li><li>案例中需要用到javax.mail的jar包，博主用的maven，此处附上maven坐标<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.mail&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mail&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="易邮邮件服务器是把自己本机作为邮件服务器，可以在本机上创建邮箱（自定义的邮箱，反正是服务器是你的电脑），切记本案例中易邮邮件服务器不能关闭，否则就和云服务器关闭了那样一个道理，用它创建的邮箱就不能用了。"><a href="#易邮邮件服务器是把自己本机作为邮件服务器，可以在本机上创建邮箱（自定义的邮箱，反正是服务器是你的电脑），切记本案例中易邮邮件服务器不能关闭，否则就和云服务器关闭了那样一个道理，用它创建的邮箱就不能用了。" class="headerlink" title="易邮邮件服务器是把自己本机作为邮件服务器，可以在本机上创建邮箱（自定义的邮箱，反正是服务器是你的电脑），切记本案例中易邮邮件服务器不能关闭，否则就和云服务器关闭了那样一个道理，用它创建的邮箱就不能用了。"></a>易邮邮件服务器是把自己本机作为邮件服务器，可以在本机上创建邮箱（自定义的邮箱，反正是服务器是你的电脑），切记本案例中易邮邮件服务器不能关闭，否则就和云服务器关闭了那样一个道理，用它创建的邮箱就不能用了。</h3><hr><h3 id="Foxmail里面可以添加邮箱，属于本机的邮箱（如易邮邮件服务器创建的邮箱，本机有效，填写的服务器为localhost），和网上你申请的邮箱（如QQ邮箱、网易邮箱、Gmail邮箱等）均可，在此要注意QQ邮箱需要在网页打开邮箱-gt-设置-gt-账户-gt-开启服务（在中间靠下的位置）打开POP3-SMTP服务和IMAP-SMTP服务，若没打开后面第二个案例就会连不上了。"><a href="#Foxmail里面可以添加邮箱，属于本机的邮箱（如易邮邮件服务器创建的邮箱，本机有效，填写的服务器为localhost），和网上你申请的邮箱（如QQ邮箱、网易邮箱、Gmail邮箱等）均可，在此要注意QQ邮箱需要在网页打开邮箱-gt-设置-gt-账户-gt-开启服务（在中间靠下的位置）打开POP3-SMTP服务和IMAP-SMTP服务，若没打开后面第二个案例就会连不上了。" class="headerlink" title="Foxmail里面可以添加邮箱，属于本机的邮箱（如易邮邮件服务器创建的邮箱，本机有效，填写的服务器为localhost），和网上你申请的邮箱（如QQ邮箱、网易邮箱、Gmail邮箱等）均可，在此要注意QQ邮箱需要在网页打开邮箱-&gt;设置-&gt;账户-&gt;开启服务（在中间靠下的位置）打开POP3/SMTP服务和IMAP/SMTP服务，若没打开后面第二个案例就会连不上了。"></a>Foxmail里面可以添加邮箱，属于本机的邮箱（如易邮邮件服务器创建的邮箱，本机有效，填写的服务器为localhost），和网上你申请的邮箱（如QQ邮箱、网易邮箱、Gmail邮箱等）均可，在此要注意QQ邮箱需要在网页打开邮箱-&gt;设置-&gt;账户-&gt;开启服务（在中间靠下的位置）打开POP3/SMTP服务和IMAP/SMTP服务，若没打开后面第二个案例就会连不上了。</h3><hr><h3 id="一定要在Foxmail中将在易邮邮件服务器中创建的邮箱添加进去，用于查看接收邮件"><a href="#一定要在Foxmail中将在易邮邮件服务器中创建的邮箱添加进去，用于查看接收邮件" class="headerlink" title="一定要在Foxmail中将在易邮邮件服务器中创建的邮箱添加进去，用于查看接收邮件"></a>一定要在Foxmail中将在易邮邮件服务器中创建的邮箱添加进去，用于查看接收邮件</h3><h2 id="终于开始撸本机邮件练习的代码部分了："><a href="#终于开始撸本机邮件练习的代码部分了：" class="headerlink" title="终于开始撸本机邮件练习的代码部分了："></a>终于开始撸本机邮件练习的代码部分了：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建连接对象，连接到邮箱服务器</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">Session session = Session.getInstance(properties, <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用来连接邮箱服务器的一个邮箱账号（能连上本机邮箱服务器即可）</span></span><br><span class="line">        <span class="comment">//此处用的是易邮邮件服务器创建的邮箱（邮箱密码不能错，否则连不上服务器）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(<span class="string">"user1@store.com"</span>, <span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//1.1开启debug模式，可以看到邮件的发送状态（非必要）</span></span><br><span class="line">session.setDebug(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//2.创建邮件对象</span></span><br><span class="line">Message message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//2.1设置发件人</span></span><br><span class="line">    <span class="comment">//此处设置的是接收者接收邮件上标注的发送者邮箱</span></span><br><span class="line">    <span class="comment">//本人同样是用的在易邮邮件服务器上创建的虚拟邮箱</span></span><br><span class="line">    message.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"service@store.com"</span>));</span><br><span class="line">    <span class="comment">//2.2设置收件人</span></span><br><span class="line">    message.setRecipient(Message.RecipientType.TO, <span class="keyword">new</span> InternetAddress(<span class="string">"user2@store.com"</span>));</span><br><span class="line">    <span class="comment">//2.3设置邮件主题（标题）</span></span><br><span class="line">    message.setSubject(<span class="string">"一封测试邮件"</span>);</span><br><span class="line">    <span class="comment">//2.4设置邮件的正文</span></span><br><span class="line">    <span class="comment">//此处设置的邮件内容是html代码，可以很方便的在里面书写html代码，加链接等等</span></span><br><span class="line">    message.setContent(<span class="string">"&lt;h1&gt;邮件内容&lt;/h1&gt;"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    <span class="comment">//3.发送一封邮件</span></span><br><span class="line">    Transport.send(message);</span><br><span class="line">    <span class="comment">//此时邮件正在发送，如果debug打开则可以在控制台看到打印的信息</span></span><br><span class="line">    <span class="comment">//发送成功后在Foxmail中点击菜单上的[收取]，邮件发送完成可以收到新邮件并打开查看</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例二、使用自己在网上申请的邮箱来通过代码发邮件"><a href="#案例二、使用自己在网上申请的邮箱来通过代码发邮件" class="headerlink" title="案例二、使用自己在网上申请的邮箱来通过代码发邮件"></a>案例二、使用自己在网上申请的邮箱来通过代码发邮件</h1><h2 id="预备条件：准备至少两个邮箱（否则只能单个邮箱自己发给自己了）"><a href="#预备条件：准备至少两个邮箱（否则只能单个邮箱自己发给自己了）" class="headerlink" title="预备条件：准备至少两个邮箱（否则只能单个邮箱自己发给自己了）"></a>预备条件：准备至少两个邮箱（否则只能单个邮箱自己发给自己了）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//必须采用加密，不然发不了，会报异常说不安全</span></span><br><span class="line">    MailSSLSocketFactory sf = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">    sf.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line">    prop.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);</span><br><span class="line">    prop.put(<span class="string">"mail.smtp.ssl.socketFactory"</span>, sf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是使用126邮箱，此处改为smtp.126.com即可</span></span><br><span class="line">    prop.setProperty(<span class="string">"mail.host"</span>, <span class="string">"smtp.qq.com"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);</span><br><span class="line">    <span class="comment">//设置端口为465安全端口</span></span><br><span class="line">    prop.setProperty(<span class="string">"mail.smtp.port"</span>, <span class="string">"465"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">    <span class="comment">//使用JavaMail发送邮件的5个步骤</span></span><br><span class="line">    <span class="comment">//1、创建session</span></span><br><span class="line">    Session session = Session.getInstance(prop);</span><br><span class="line">    <span class="comment">//开启Session的debug模式，这样就可以查看到程序发送Email的运行状态</span></span><br><span class="line">    session.setDebug(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//2、通过session得到transport对象</span></span><br><span class="line">    Transport ts = session.getTransport();</span><br><span class="line">    <span class="comment">//3、使用邮箱的用户名和密码连上邮件服务器，发送邮件时，发件人需要提交邮箱的用户名和密码给smtp服务器，用户名和密码都通过验证之后才能够正常发送邮件给收件人。</span></span><br><span class="line">    <span class="comment">//注意这里不是使用的邮箱密码，而是邮箱设置中的授权码</span></span><br><span class="line">    <span class="comment">//授权码在网页打开邮箱-&gt;设置-&gt;账户-&gt;开启服务旁边可以看到（如果是QQ邮箱则需要）</span></span><br><span class="line">    <span class="comment">//如果是其余的邮箱，如网易126邮箱，则不需要授权码，此处使用邮箱和密码，即可连接服务器</span></span><br><span class="line">    ts.connect(<span class="string">"smtp.qq.com"</span>, <span class="string">"******@qq.com"</span>, <span class="string">"******zhmj*****"</span>);</span><br><span class="line">    <span class="comment">//4、创建邮件</span></span><br><span class="line">    Message message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">    <span class="comment">//设置发件人</span></span><br><span class="line">    message.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"******@qq.com"</span>));</span><br><span class="line">    <span class="comment">//设置收件人</span></span><br><span class="line">    message.setRecipient(Message.RecipientType.TO, <span class="keyword">new</span> InternetAddress(<span class="string">"******@126.com"</span>));</span><br><span class="line">    message.setSubject(<span class="string">"测试邮件"</span>);</span><br><span class="line">    <span class="comment">//设置邮件的正文</span></span><br><span class="line">    <span class="comment">//同上设置的html代码内容的邮件</span></span><br><span class="line">    message.setContent(<span class="string">"&lt;h1&gt;***测试邮件&lt;/h1&gt;"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">    <span class="comment">//5、发送邮件</span></span><br><span class="line">    ts.sendMessage(message, message.getAllRecipients());</span><br><span class="line">    ts.close();</span><br><span class="line">    <span class="comment">//本案例中演示用的博主的qq邮箱向126邮箱发送邮件</span></span><br><span class="line">    <span class="comment">//切记QQ邮箱的特殊性，打开POP3/SMTP和IMAP/SMTP服务，以及使用授权码，Properties要设置SSL安全连接</span></span><br><span class="line">    <span class="comment">//连接服务器一定是发送邮件的邮箱的所在服务器</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;强大的Java也是可以发邮件的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;案例一、在自己本机上搭邮件服务器体验邮件的发送接收&quot;&gt;&lt;a href=&quot;#案例一、在自己本机上搭邮件服务器体验邮件
      
    
    </summary>
    
      <category term="java" scheme="http://github.ymlsfly.xin/categories/java/"/>
    
    
      <category term="java" scheme="http://github.ymlsfly.xin/tags/java/"/>
    
      <category term="mail" scheme="http://github.ymlsfly.xin/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>TestStudy</title>
    <link href="http://github.ymlsfly.xin/2018/01/13/TestStudy/"/>
    <id>http://github.ymlsfly.xin/2018/01/13/TestStudy/</id>
    <published>2018-01-13T07:31:55.000Z</published>
    <updated>2018-01-14T13:25:56.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><blockquote class="blockquote-center"><p>作为新手刚接触的学习</p></blockquote></h2><h3 id="先来些hexo命令"><a href="#先来些hexo命令" class="headerlink" title="先来些hexo命令"></a>先来些hexo命令</h3><h4 id="hexo的安装-更新-初始化"><a href="#hexo的安装-更新-初始化" class="headerlink" title="hexo的安装/更新/初始化"></a>hexo的安装/更新/初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo -g</span><br><span class="line">$ npm update hexo -g</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><h4 id="生成静态网页（编译）"><a href="#生成静态网页（编译）" class="headerlink" title="生成静态网页（编译）"></a>生成静态网页（编译）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">简写：</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h4 id="创建一个新的博客文件"><a href="#创建一个新的博客文件" class="headerlink" title="创建一个新的博客文件"></a>创建一个新的博客文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"firstBlog"</span></span><br><span class="line">简写：</span><br><span class="line">$ hexo n <span class="string">"firstBlog"</span></span><br></pre></td></tr></table></figure><h4 id="启动服务预览（即本地启动）"><a href="#启动服务预览（即本地启动）" class="headerlink" title="启动服务预览（即本地启动）"></a>启动服务预览（即本地启动）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server [-p port -i ip] （默认4000）</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h4 id="部署（提交）"><a href="#部署（提交）" class="headerlink" title="部署（提交）"></a>部署（提交）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">简写：</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h4 id="清除缓存-网页正常情况下可以忽略"><a href="#清除缓存-网页正常情况下可以忽略" class="headerlink" title="清除缓存(网页正常情况下可以忽略)"></a>清除缓存(网页正常情况下可以忽略)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="再看下Markdown"><a href="#再看下Markdown" class="headerlink" title="再看下Markdown"></a>再看下Markdown</h3><h4 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h4><p>在插入处先按入两个以上的空格然后回车。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如果要标记一小段行内代码，可以用反引号把它包起来（`）。一整段代码则用三个反引号（`）将其包括起来，并且可以指明是什么语言的代码。<br>行内代码：  <code>ls</code><br>整段代码（且指明了java）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello World"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="三个以上的星号、减号、底线来建立一个分隔线"><a href="#三个以上的星号、减号、底线来建立一个分隔线" class="headerlink" title="三个以上的星号、减号、底线来建立一个分隔线"></a>三个以上的星号、减号、底线来建立一个分隔线</h4><hr><h4 id="行内式链接"><a href="#行内式链接" class="headerlink" title="行内式链接"></a>行内式链接</h4><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可：</p><p>这是网站<a href="http://www.baidu.com/" title="title" target="_blank" rel="noopener">地址</a></p><p>链接到同样是主机的<a href="../test.html">资源</a></p><h4 id="参考式链接"><a href="#参考式链接" class="headerlink" title="参考式链接"></a>参考式链接</h4><p>参考式的链接是在链接文字的括号后面再接上另一个方括   号，而在第二个方括号里面要填入用以辨识链接的标记（链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写）：</p><p>这是个参考式 <a href="http://www.baidu.com/" title="Optional Title Here1" target="_blank" rel="noopener">链接</a> 通过调用定义好的链接id1.<br>这是个参考式 <a href="http://www.baidu.com/" title="Optional Title Here2" target="_blank" rel="noopener">链接</a> 通过调用定义好的链接id2.  </p><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 <em> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 * 或 </em> 包起来的话，则会被转成 <code>&lt;strong&gt;</code></p><p><em>em</em><br><strong>strong</strong><br><em>em</em><br><strong>strong</strong><br><strong><em>em+strong</em></strong></p><h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br>[<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>]</p><h4 id="无序列表和有序列表"><a href="#无序列表和有序列表" class="headerlink" title="无序列表和有序列表"></a>无序列表和有序列表</h4><p>无序列表使用星号、加号或是减号作为列表标记。</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><p>有序列表则使用数字接着一个英文句点。</p><ol><li>红色</li><li>绿色</li><li>蓝色</li></ol><h4 id="内置居中标签"><a href="#内置居中标签" class="headerlink" title="内置居中标签"></a>内置居中标签</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>给img添加class="blockquote-center"</span><br><span class="line"><span class="bullet">2. </span>&#123;% centerquote %&#125;...&#123;% endcenterquote %&#125;</span><br><span class="line"><span class="bullet">3. </span>&#123;% cq %&#125;...&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;作为新手刚接触的学习&lt;/p&gt;
&lt;/blockquote&gt;&lt;/h2&gt;&lt;h3 id=&quot;先来些h
      
    
    </summary>
    
      <category term="学习" scheme="http://github.ymlsfly.xin/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://github.ymlsfly.xin/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="入门" scheme="http://github.ymlsfly.xin/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://github.ymlsfly.xin/2018/01/12/hello-world/"/>
    <id>http://github.ymlsfly.xin/2018/01/12/hello-world/</id>
    <published>2018-01-12T03:42:48.341Z</published>
    <updated>2018-01-14T13:01:46.775Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><h4 id="hgjhgjg"><a href="#hgjhgjg" class="headerlink" title="hgjhgjg"></a>hgjhgjg</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="默认" scheme="http://github.ymlsfly.xin/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
      <category term="hello" scheme="http://github.ymlsfly.xin/tags/hello/"/>
    
  </entry>
  
</feed>
